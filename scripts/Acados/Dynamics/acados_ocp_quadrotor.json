{
    "acados_include_path": "/home/fer/acados/include",
    "acados_lib_path": "/home/fer/acados/lib",
    "code_export_directory": "/home/fer/dual_ws/src/dual_quaternion/scripts/Acados/Dynamics/c_generated_code",
    "constraints": {
        "C": [],
        "C_e": [],
        "D": [],
        "constr_type": "BGH",
        "constr_type_e": "BGH",
        "idxbu": [],
        "idxbx": [],
        "idxbx_0": [],
        "idxbx_e": [],
        "idxbxe_0": [],
        "idxsbu": [],
        "idxsbx": [],
        "idxsbx_e": [],
        "idxsg": [],
        "idxsg_e": [],
        "idxsh": [],
        "idxsh_e": [],
        "idxsphi": [],
        "idxsphi_e": [],
        "lbu": [],
        "lbx": [],
        "lbx_0": [],
        "lbx_e": [],
        "lg": [],
        "lg_e": [],
        "lh": [],
        "lh_e": [],
        "lphi": [],
        "lphi_e": [],
        "lsbu": [],
        "lsbx": [],
        "lsbx_e": [],
        "lsg": [],
        "lsg_e": [],
        "lsh": [],
        "lsh_e": [],
        "lsphi": [],
        "lsphi_e": [],
        "ubu": [],
        "ubx": [],
        "ubx_0": [],
        "ubx_e": [],
        "ug": [],
        "ug_e": [],
        "uh": [],
        "uh_e": [],
        "uphi": [],
        "uphi_e": [],
        "usbu": [],
        "usbx": [],
        "usbx_e": [],
        "usg": [],
        "usg_e": [],
        "ush": [],
        "ush_e": [],
        "usphi": [],
        "usphi_e": []
    },
    "cost": {
        "Vu": [],
        "Vu_0": [],
        "Vx": [],
        "Vx_0": [],
        "Vx_e": [],
        "Vz": [],
        "Vz_0": [],
        "W": [],
        "W_0": [],
        "W_e": [],
        "Zl": [],
        "Zl_e": [],
        "Zu": [],
        "Zu_e": [],
        "cost_ext_fun_type": "casadi",
        "cost_ext_fun_type_0": "casadi",
        "cost_ext_fun_type_e": "casadi",
        "cost_type": "LINEAR_LS",
        "cost_type_0": "LINEAR_LS",
        "cost_type_e": "LINEAR_LS",
        "yref": [],
        "yref_0": [],
        "yref_e": [],
        "zl": [],
        "zl_e": [],
        "zu": [],
        "zu_e": []
    },
    "cython_include_dirs": [
        "/home/fer/miniconda3/envs/py3-learning/lib/python3.8/site-packages/numpy/core/include",
        "/home/fer/miniconda3/envs/py3-learning/include/python3.8"
    ],
    "dims": {
        "N": 101,
        "nbu": 0,
        "nbx": 0,
        "nbx_0": 0,
        "nbx_e": 0,
        "nbxe_0": 0,
        "ng": 0,
        "ng_e": 0,
        "nh": 0,
        "nh_e": 0,
        "np": 0,
        "nphi": 0,
        "nphi_e": 0,
        "nr": 0,
        "nr_e": 0,
        "ns": 0,
        "ns_e": 0,
        "nsbu": 0,
        "nsbx": 0,
        "nsbx_e": 0,
        "nsg": 0,
        "nsg_e": 0,
        "nsh": 0,
        "nsh_e": 0,
        "nsphi": 0,
        "nsphi_e": 0,
        "nu": 6,
        "nx": 8,
        "ny": 0,
        "ny_0": 0,
        "ny_e": 0,
        "nz": 0
    },
    "json_file": "acados_ocp_quadrotor.json",
    "model": {
        "con_h_expr": null,
        "con_h_expr_e": null,
        "con_phi_expr": null,
        "con_phi_expr_e": null,
        "con_r_expr": null,
        "con_r_expr_e": null,
        "con_r_in_phi": null,
        "con_r_in_phi_e": null,
        "cost_conl_custom_outer_hess": null,
        "cost_conl_custom_outer_hess_0": null,
        "cost_conl_custom_outer_hess_e": null,
        "cost_expr_ext_cost": null,
        "cost_expr_ext_cost_0": null,
        "cost_expr_ext_cost_custom_hess": null,
        "cost_expr_ext_cost_custom_hess_0": null,
        "cost_expr_ext_cost_custom_hess_e": null,
        "cost_expr_ext_cost_e": null,
        "cost_psi_expr": null,
        "cost_psi_expr_0": null,
        "cost_psi_expr_e": null,
        "cost_r_in_psi_expr": null,
        "cost_r_in_psi_expr_0": null,
        "cost_r_in_psi_expr_e": null,
        "cost_y_expr": null,
        "cost_y_expr_0": null,
        "cost_y_expr_e": null,
        "disc_dyn_expr": null,
        "dyn_disc_fun": null,
        "dyn_disc_fun_jac": null,
        "dyn_disc_fun_jac_hess": null,
        "dyn_ext_fun_type": "casadi",
        "dyn_generic_source": null,
        "f_expl_expr": "@1=horzcat(horzcat(qw_1d, (-qx_1d), (-qy_1d), (-qz_1d))', horzcat(qx_1d, qw_1d, (-qz_1d), qy_1d)', horzcat(qy_1d, qz_1d, qw_1d, (-qx_1d))', horzcat(qz_1d, (-qy_1d), qx_1d, qw_1d)')', (0.5*mac(horzcat(horzcat(@1, zeros(4x4))', horzcat(horzcat(horzcat(dw_1d, (-dx_1d), (-dy_1d), (-dz_1d))', horzcat(dx_1d, dw_1d, (-dz_1d), dy_1d)', horzcat(dy_1d, dz_1d, dw_1d, (-dx_1d))', horzcat(dz_1d, (-dy_1d), dx_1d, dw_1d)')', @1)')',vertcat(0, wx_1d, wy_1d, wz_1d, 0, vx_1d, vy_1d, vz_1d),zeros(8x1)))",
        "f_impl_expr": "@1=horzcat(horzcat(qw_1d, (-qx_1d), (-qy_1d), (-qz_1d))', horzcat(qx_1d, qw_1d, (-qz_1d), qy_1d)', horzcat(qy_1d, qz_1d, qw_1d, (-qx_1d))', horzcat(qz_1d, (-qy_1d), qx_1d, qw_1d)')', (vertcat(qw_1dot, qx_1dot, qy_1dot, qz_1dot, dw_1dot, dx_1dot, dy_1dot, dz_1dot)-(0.5*mac(horzcat(horzcat(@1, zeros(4x4))', horzcat(horzcat(horzcat(dw_1d, (-dx_1d), (-dy_1d), (-dz_1d))', horzcat(dx_1d, dw_1d, (-dz_1d), dy_1d)', horzcat(dy_1d, dz_1d, dw_1d, (-dx_1d))', horzcat(dz_1d, (-dy_1d), dx_1d, dw_1d)')', @1)')',vertcat(0, wx_1d, wy_1d, wz_1d, 0, vx_1d, vy_1d, vz_1d),zeros(8x1))))",
        "gnsf": {
            "nontrivial_f_LO": 1,
            "purely_linear": 0
        },
        "name": "quadrotor",
        "p": "0x0",
        "u": "vertcat(wx_1d, wy_1d, wz_1d, vx_1d, vy_1d, vz_1d)",
        "x": "vertcat(qw_1d, qx_1d, qy_1d, qz_1d, dw_1d, dx_1d, dy_1d, dz_1d)",
        "xdot": "vertcat(qw_1dot, qx_1dot, qy_1dot, qz_1dot, dw_1dot, dx_1dot, dy_1dot, dz_1dot)",
        "z": "0x0"
    },
    "parameter_values": [],
    "problem_class": "OCP",
    "shared_lib_ext": ".so",
    "solver_options": {
        "Tsim": 0.0049504950495049506,
        "alpha_min": 0.05,
        "alpha_reduction": 0.7,
        "collocation_type": "GAUSS_LEGENDRE",
        "custom_update_filename": "",
        "custom_update_header_filename": "",
        "eps_sufficient_descent": 0.0001,
        "exact_hess_constr": 1,
        "exact_hess_cost": 1,
        "exact_hess_dyn": 1,
        "ext_cost_num_hess": 0,
        "ext_fun_compile_flags": "-O2",
        "full_step_dual": 0,
        "globalization": "FIXED_STEP",
        "globalization_use_SOC": 0,
        "hessian_approx": "GAUSS_NEWTON",
        "hpipm_mode": "BALANCE",
        "initialize_t_slacks": 0,
        "integrator_type": "IRK",
        "levenberg_marquardt": 0.01,
        "line_search_use_sufficient_descent": 0,
        "model_external_shared_lib_dir": null,
        "model_external_shared_lib_name": null,
        "nlp_solver_ext_qp_res": 0,
        "nlp_solver_max_iter": 200,
        "nlp_solver_step_length": 1.0,
        "nlp_solver_tol_comp": 0.0001,
        "nlp_solver_tol_eq": 0.0001,
        "nlp_solver_tol_ineq": 0.0001,
        "nlp_solver_tol_stat": 0.0001,
        "nlp_solver_type": "SQP_RTI",
        "print_level": 0,
        "qp_solver": "PARTIAL_CONDENSING_HPIPM",
        "qp_solver_cond_N": null,
        "qp_solver_cond_ric_alg": 1,
        "qp_solver_iter_max": 50,
        "qp_solver_ric_alg": 1,
        "qp_solver_tol_comp": null,
        "qp_solver_tol_eq": null,
        "qp_solver_tol_ineq": null,
        "qp_solver_tol_stat": null,
        "qp_solver_warm_start": 0,
        "regularize_method": null,
        "shooting_nodes": null,
        "sim_method_jac_reuse": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "sim_method_newton_iter": 3,
        "sim_method_newton_tol": 0.0,
        "sim_method_num_stages": [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
        ],
        "sim_method_num_steps": [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
        ],
        "tf": 0.5,
        "time_steps": [
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506,
            0.0049504950495049506
        ]
    }
}