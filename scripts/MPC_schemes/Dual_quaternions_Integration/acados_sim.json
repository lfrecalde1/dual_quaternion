{
    "acados_include_path": "/home/fer/acados/include",
    "acados_lib_path": "/home/fer/acados/lib",
    "code_export_directory": "/home/fer/dual_ws/src/dual_quaternion/scripts/MPC_schemes/Dual_quaternions_Integration/c_generated_code",
    "cython_include_dirs": [
        "/home/fer/miniconda3/envs/py3-learning/lib/python3.8/site-packages/numpy/core/include",
        "/home/fer/miniconda3/envs/py3-learning/include/python3.8"
    ],
    "dims": {
        "np": 0,
        "nu": 6,
        "nx": 8,
        "nz": 0
    },
    "model": {
        "con_h_expr": null,
        "con_h_expr_e": null,
        "con_phi_expr": null,
        "con_phi_expr_e": null,
        "con_r_expr": null,
        "con_r_expr_e": null,
        "con_r_in_phi": null,
        "con_r_in_phi_e": null,
        "cost_conl_custom_outer_hess": null,
        "cost_conl_custom_outer_hess_0": null,
        "cost_conl_custom_outer_hess_e": null,
        "cost_expr_ext_cost": null,
        "cost_expr_ext_cost_0": null,
        "cost_expr_ext_cost_custom_hess": null,
        "cost_expr_ext_cost_custom_hess_0": null,
        "cost_expr_ext_cost_custom_hess_e": null,
        "cost_expr_ext_cost_e": null,
        "cost_psi_expr": null,
        "cost_psi_expr_0": null,
        "cost_psi_expr_e": null,
        "cost_r_in_psi_expr": null,
        "cost_r_in_psi_expr_0": null,
        "cost_r_in_psi_expr_e": null,
        "cost_y_expr": null,
        "cost_y_expr_0": null,
        "cost_y_expr_e": null,
        "disc_dyn_expr": null,
        "dyn_disc_fun": null,
        "dyn_disc_fun_jac": null,
        "dyn_disc_fun_jac_hess": null,
        "dyn_ext_fun_type": "casadi",
        "dyn_generic_source": null,
        "f_expl_expr": "@1=horzcat(horzcat(qw_1d, (-qx_1d), (-qy_1d), (-qz_1d))', horzcat(qx_1d, qw_1d, (-qz_1d), qy_1d)', horzcat(qy_1d, qz_1d, qw_1d, (-qx_1d))', horzcat(qz_1d, (-qy_1d), qx_1d, qw_1d)')', @2=vertcat(qw_1d, qx_1d, qy_1d, qz_1d, dw_1d, dx_1d, dy_1d, dz_1d), @3=@2[:4], @4=@2[4:8], ((0.5*mac(horzcat(horzcat(@1, zeros(4x4))', horzcat(horzcat(horzcat(dw_1d, (-dx_1d), (-dy_1d), (-dz_1d))', horzcat(dx_1d, dw_1d, (-dz_1d), dy_1d)', horzcat(dy_1d, dz_1d, dw_1d, (-dx_1d))', horzcat(dz_1d, (-dy_1d), dx_1d, dw_1d)')', @1)')',vertcat(0, wx_1d, wy_1d, wz_1d, 0, vx_1d, vy_1d, vz_1d),zeros(8x1)))+vertcat((@3*(10*(1-||@3||_F))), (@4*(10*(2.*dot(@3, @4))))))",
        "f_impl_expr": "@1=horzcat(horzcat(qw_1d, (-qx_1d), (-qy_1d), (-qz_1d))', horzcat(qx_1d, qw_1d, (-qz_1d), qy_1d)', horzcat(qy_1d, qz_1d, qw_1d, (-qx_1d))', horzcat(qz_1d, (-qy_1d), qx_1d, qw_1d)')', @2=vertcat(qw_1d, qx_1d, qy_1d, qz_1d, dw_1d, dx_1d, dy_1d, dz_1d), @3=@2[:4], @4=@2[4:8], (vertcat(qw_1dot, qx_1dot, qy_1dot, qz_1dot, dw_1dot, dx_1dot, dy_1dot, dz_1dot)-((0.5*mac(horzcat(horzcat(@1, zeros(4x4))', horzcat(horzcat(horzcat(dw_1d, (-dx_1d), (-dy_1d), (-dz_1d))', horzcat(dx_1d, dw_1d, (-dz_1d), dy_1d)', horzcat(dy_1d, dz_1d, dw_1d, (-dx_1d))', horzcat(dz_1d, (-dy_1d), dx_1d, dw_1d)')', @1)')',vertcat(0, wx_1d, wy_1d, wz_1d, 0, vx_1d, vy_1d, vz_1d),zeros(8x1)))+vertcat((@3*(10*(1-||@3||_F))), (@4*(10*(2.*dot(@3, @4)))))))",
        "gnsf": {
            "nontrivial_f_LO": 1,
            "purely_linear": 0
        },
        "name": "quadrotor",
        "p": "0x0",
        "u": "vertcat(wx_1d, wy_1d, wz_1d, vx_1d, vy_1d, vz_1d)",
        "x": "vertcat(qw_1d, qx_1d, qy_1d, qz_1d, dw_1d, dx_1d, dy_1d, dz_1d)",
        "xdot": "vertcat(qw_1dot, qx_1dot, qy_1dot, qz_1dot, dw_1dot, dx_1dot, dy_1dot, dz_1dot)",
        "z": "0x0"
    },
    "parameter_values": [],
    "problem_class": "SIM",
    "shared_lib_ext": ".so",
    "solver_options": {
        "Tsim": 0.03,
        "collocation_type": "GAUSS_LEGENDRE",
        "ext_fun_compile_flags": "-O2",
        "integrator_type": "ERK",
        "output_z": true,
        "sens_adj": false,
        "sens_algebraic": false,
        "sens_forw": true,
        "sens_hess": false,
        "sim_method_jac_reuse": 0,
        "sim_method_newton_iter": 3,
        "sim_method_newton_tol": 0.0,
        "sim_method_num_stages": 1,
        "sim_method_num_steps": 1
    }
}